/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "add_proposal(string,string,uint64,asset)void": {
      "default_arguments": {
        "membership_token": {
          "source": "constant",
          "data": 591099355
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "read_proposal(string)(string,string,bool,uint64,uint64,uint64)": {
      "structs": {
        "output": {
          "name": "Proposal",
          "elements": [
            [
              "name",
              "string"
            ],
            [
              "description",
              "string"
            ],
            [
              "is_open",
              "bool"
            ],
            [
              "end_time",
              "uint64"
            ],
            [
              "yes_count",
              "uint64"
            ],
            [
              "no_count",
              "uint64"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "vote_yes(string,asset)void": {
      "default_arguments": {
        "membership_token": {
          "source": "constant",
          "data": 591099355
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "vote_no(string,asset)void": {
      "default_arguments": {
        "membership_token": {
          "source": "constant",
          "data": 591099355
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "delete_proposal(string,asset)void": {
      "default_arguments": {
        "membership_token": {
          "source": "constant",
          "data": 591099355
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "generate_membership_token(pay,string)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {},
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "proposals",
    "methods": [
      {
        "name": "add_proposal",
        "args": [
          {
            "type": "string",
            "name": "name"
          },
          {
            "type": "string",
            "name": "description"
          },
          {
            "type": "uint64",
            "name": "end_time"
          },
          {
            "type": "asset",
            "name": "membership_token"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "read_proposal",
        "args": [
          {
            "type": "string",
            "name": "name"
          }
        ],
        "returns": {
          "type": "(string,string,bool,uint64,uint64,uint64)"
        }
      },
      {
        "name": "vote_yes",
        "args": [
          {
            "type": "string",
            "name": "proposal_name"
          },
          {
            "type": "asset",
            "name": "membership_token"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "vote_no",
        "args": [
          {
            "type": "string",
            "name": "proposal_name"
          },
          {
            "type": "asset",
            "name": "membership_token"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "delete_proposal",
        "args": [
          {
            "type": "string",
            "name": "proposal_name"
          },
          {
            "type": "asset",
            "name": "membership_token"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "generate_membership_token",
        "args": [
          {
            "type": "pay",
            "name": "seed"
          },
          {
            "type": "string",
            "name": "token_name"
          }
        ],
        "returns": {
          "type": "uint64"
        },
        "desc": "create membership token and receive initial seed payment"
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the Proposals smart contract.
 */
export type Proposals = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'add_proposal(string,string,uint64,asset)void' | 'add_proposal', {
      argsObj: {
        name: string
        description: string
        end_time: bigint | number
        membership_token?: number | bigint
      }
      argsTuple: [name: string, description: string, end_time: bigint | number, membership_token: number | bigint | undefined]
      returns: void
    }>
    & Record<'read_proposal(string)(string,string,bool,uint64,uint64,uint64)' | 'read_proposal', {
      argsObj: {
        name: string
      }
      argsTuple: [name: string]
      returns: Proposal
    }>
    & Record<'vote_yes(string,asset)void' | 'vote_yes', {
      argsObj: {
        proposal_name: string
        membership_token?: number | bigint
      }
      argsTuple: [proposal_name: string, membership_token: number | bigint | undefined]
      returns: void
    }>
    & Record<'vote_no(string,asset)void' | 'vote_no', {
      argsObj: {
        proposal_name: string
        membership_token?: number | bigint
      }
      argsTuple: [proposal_name: string, membership_token: number | bigint | undefined]
      returns: void
    }>
    & Record<'delete_proposal(string,asset)void' | 'delete_proposal', {
      argsObj: {
        proposal_name: string
        membership_token?: number | bigint
      }
      argsTuple: [proposal_name: string, membership_token: number | bigint | undefined]
      returns: void
    }>
    & Record<'generate_membership_token(pay,string)uint64' | 'generate_membership_token', {
      argsObj: {
        seed: TransactionToSign | Transaction | Promise<SendTransactionResult>
        token_name: string
      }
      argsTuple: [seed: TransactionToSign | Transaction | Promise<SendTransactionResult>, token_name: string]
      returns: bigint
    }>
}
/**
 * Defines the possible abi call signatures
 */
export type ProposalsSig = keyof Proposals['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends ProposalsSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Represents a Proposal result as a struct
 */
export type Proposal = {
  name: string
  description: string
  is_open: boolean
  end_time: bigint
  yes_count: bigint
  no_count: bigint
}
/**
 * Converts the tuple representation of a Proposal to the struct representation
 */
export function Proposal([name, description, is_open, end_time, yes_count, no_count]: [string, string, boolean, bigint, bigint, bigint] ) {
  return {
    name,
    description,
    is_open,
    end_time,
    yes_count,
    no_count,
  }
}
/**
 * Maps a method signature from the Proposals smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends ProposalsSig> = Proposals['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Proposals smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ProposalsSig> = Proposals['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type ProposalsCreateCalls = (typeof ProposalsCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type ProposalsCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type ProposalsDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: ProposalsCreateCalls) => ProposalsCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class ProposalsCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the proposals smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the add_proposal(string,string,uint64,asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addProposal(args: MethodArgs<'add_proposal(string,string,uint64,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'add_proposal(string,string,uint64,asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.name, args.description, args.end_time, args.membership_token],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the read_proposal(string)(string,string,bool,uint64,uint64,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static readProposal(args: MethodArgs<'read_proposal(string)(string,string,bool,uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'read_proposal(string)(string,string,bool,uint64,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.name],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the vote_yes(string,asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static voteYes(args: MethodArgs<'vote_yes(string,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'vote_yes(string,asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.proposal_name, args.membership_token],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the vote_no(string,asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static voteNo(args: MethodArgs<'vote_no(string,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'vote_no(string,asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.proposal_name, args.membership_token],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the delete_proposal(string,asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deleteProposal(args: MethodArgs<'delete_proposal(string,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'delete_proposal(string,asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.proposal_name, args.membership_token],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the generate_membership_token(pay,string)uint64 ABI method
   *
   * create membership token and receive initial seed payment
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static generateMembershipToken(args: MethodArgs<'generate_membership_token(pay,string)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'generate_membership_token(pay,string)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.seed, args.token_name],
      ...params,
    }
  }
}

/**
 * A client to make calls to the proposals smart contract
 */
export class ProposalsClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `ProposalsClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Proposals['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the proposals smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: ProposalsDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(ProposalsCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the proposals smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.create(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the proposals smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the add_proposal(string,string,uint64,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addProposal(args: MethodArgs<'add_proposal(string,string,uint64,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ProposalsCallFactory.addProposal(args, params))
  }

  /**
   * Calls the read_proposal(string)(string,string,bool,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public readProposal(args: MethodArgs<'read_proposal(string)(string,string,bool,uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ProposalsCallFactory.readProposal(args, params), Proposal)
  }

  /**
   * Calls the vote_yes(string,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public voteYes(args: MethodArgs<'vote_yes(string,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ProposalsCallFactory.voteYes(args, params))
  }

  /**
   * Calls the vote_no(string,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public voteNo(args: MethodArgs<'vote_no(string,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ProposalsCallFactory.voteNo(args, params))
  }

  /**
   * Calls the delete_proposal(string,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deleteProposal(args: MethodArgs<'delete_proposal(string,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ProposalsCallFactory.deleteProposal(args, params))
  }

  /**
   * Calls the generate_membership_token(pay,string)uint64 ABI method.
   *
   * create membership token and receive initial seed payment
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public generateMembershipToken(args: MethodArgs<'generate_membership_token(pay,string)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ProposalsCallFactory.generateMembershipToken(args, params))
  }

  public compose(): ProposalsComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      addProposal(args: MethodArgs<'add_proposal(string,string,uint64,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addProposal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      readProposal(args: MethodArgs<'read_proposal(string)(string,string,bool,uint64,uint64,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.readProposal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Proposal)
        return this
      },
      voteYes(args: MethodArgs<'vote_yes(string,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.voteYes(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      voteNo(args: MethodArgs<'vote_no(string,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.voteNo(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deleteProposal(args: MethodArgs<'delete_proposal(string,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deleteProposal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      generateMembershipToken(args: MethodArgs<'generate_membership_token(pay,string)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.generateMembershipToken(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as ProposalsComposer
  }
}
export type ProposalsComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the add_proposal(string,string,uint64,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addProposal(args: MethodArgs<'add_proposal(string,string,uint64,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ProposalsComposer<[...TReturns, MethodReturn<'add_proposal(string,string,uint64,asset)void'>]>

  /**
   * Calls the read_proposal(string)(string,string,bool,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readProposal(args: MethodArgs<'read_proposal(string)(string,string,bool,uint64,uint64,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ProposalsComposer<[...TReturns, MethodReturn<'read_proposal(string)(string,string,bool,uint64,uint64,uint64)'>]>

  /**
   * Calls the vote_yes(string,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  voteYes(args: MethodArgs<'vote_yes(string,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ProposalsComposer<[...TReturns, MethodReturn<'vote_yes(string,asset)void'>]>

  /**
   * Calls the vote_no(string,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  voteNo(args: MethodArgs<'vote_no(string,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ProposalsComposer<[...TReturns, MethodReturn<'vote_no(string,asset)void'>]>

  /**
   * Calls the delete_proposal(string,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteProposal(args: MethodArgs<'delete_proposal(string,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ProposalsComposer<[...TReturns, MethodReturn<'delete_proposal(string,asset)void'>]>

  /**
   * Calls the generate_membership_token(pay,string)uint64 ABI method.
   *
   * create membership token and receive initial seed payment
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  generateMembershipToken(args: MethodArgs<'generate_membership_token(pay,string)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ProposalsComposer<[...TReturns, MethodReturn<'generate_membership_token(pay,string)uint64'>]>

  /**
   * Makes a clear_state call to an existing instance of the proposals smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): ProposalsComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): ProposalsComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<ProposalsComposerResults<TReturns>>
}
export type ProposalsComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}